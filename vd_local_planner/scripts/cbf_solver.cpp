/* This file was automatically generated by CasADi 3.6.7.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) cbf_solver_ ## ID
#endif

#include <math.h>
#include <coin-or/IpStdCInterface.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

#ifndef CASADI_MAX_NUM_THREADS
#define CASADI_MAX_NUM_THREADS 1
#endif

/* Add prefix to internal symbols */
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f0_alloc_mem CASADI_PREFIX(f0_alloc_mem)
#define casadi_f0_init_mem CASADI_PREFIX(f0_init_mem)
#define casadi_f0_mem CASADI_PREFIX(f0_mem)
#define casadi_f0_mem_counter CASADI_PREFIX(f0_mem_counter)
#define casadi_f0_unused_stack CASADI_PREFIX(f0_unused_stack)
#define casadi_f0_unused_stack_counter CASADI_PREFIX(f0_unused_stack_counter)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_f2 CASADI_PREFIX(f2)
#define casadi_f3 CASADI_PREFIX(f3)
#define casadi_f4 CASADI_PREFIX(f4)
#define casadi_f5 CASADI_PREFIX(f5)
#define casadi_f6 CASADI_PREFIX(f6)
#define casadi_fill CASADI_PREFIX(fill)
#define casadi_fmax CASADI_PREFIX(fmax)
#define casadi_ipopt_data CASADI_PREFIX(ipopt_data)
#define casadi_ipopt_free_mem CASADI_PREFIX(ipopt_free_mem)
#define casadi_ipopt_hess_l_empty CASADI_PREFIX(ipopt_hess_l_empty)
#define casadi_ipopt_init CASADI_PREFIX(ipopt_init)
#define casadi_ipopt_init_mem CASADI_PREFIX(ipopt_init_mem)
#define casadi_ipopt_presolve CASADI_PREFIX(ipopt_presolve)
#define casadi_ipopt_setup CASADI_PREFIX(ipopt_setup)
#define casadi_ipopt_solve CASADI_PREFIX(ipopt_solve)
#define casadi_ipopt_sparsity CASADI_PREFIX(ipopt_sparsity)
#define casadi_ipopt_work CASADI_PREFIX(ipopt_work)
#define casadi_nlp_f0 CASADI_PREFIX(nlp_f0)
#define casadi_nlp_g0 CASADI_PREFIX(nlp_g0)
#define casadi_nlp_grad_f0 CASADI_PREFIX(nlp_grad_f0)
#define casadi_nlp_hess_l0 CASADI_PREFIX(nlp_hess_l0)
#define casadi_nlp_jac_g0 CASADI_PREFIX(nlp_jac_g0)
#define casadi_nlpsol_data CASADI_PREFIX(nlpsol_data)
#define casadi_nlpsol_detect_bounds_after CASADI_PREFIX(nlpsol_detect_bounds_after)
#define casadi_nlpsol_detect_bounds_before CASADI_PREFIX(nlpsol_detect_bounds_before)
#define casadi_nlpsol_detect_bounds_data CASADI_PREFIX(nlpsol_detect_bounds_data)
#define casadi_nlpsol_detect_bounds_prob CASADI_PREFIX(nlpsol_detect_bounds_prob)
#define casadi_nlpsol_init CASADI_PREFIX(nlpsol_init)
#define casadi_nlpsol_prob CASADI_PREFIX(nlpsol_prob)
#define casadi_nlpsol_work CASADI_PREFIX(nlpsol_work)
#define casadi_oracle_data CASADI_PREFIX(oracle_data)
#define casadi_oracle_init CASADI_PREFIX(oracle_init)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)
#define casadi_s4 CASADI_PREFIX(s4)
#define casadi_s5 CASADI_PREFIX(s5)
#define casadi_scal CASADI_PREFIX(scal)
#define casadi_sq CASADI_PREFIX(sq)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_fill(casadi_real* x, casadi_int n, casadi_real alpha) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = alpha;
  }
}

casadi_real casadi_sq(casadi_real x) { return x*x;}

struct casadi_oracle_data {
  const casadi_real** arg;
  casadi_real** res;
  casadi_int* iw;
  casadi_real* w;
  void* m;
};
void casadi_oracle_init(struct casadi_oracle_data* d, const casadi_real*** arg, casadi_real*** res,
    casadi_int** iw, casadi_real** w) {
  d->arg = *arg;
  d->res = *res;
  d->iw = *iw;
  d->w = *w;
}

struct casadi_nlpsol_detect_bounds_prob {
  casadi_int sz_arg;
  casadi_int sz_res;
  casadi_int sz_iw;
  casadi_int sz_w;
  casadi_int ng;
  casadi_int nb;
  const casadi_int *target_x;
  const casadi_int *target_g;
  const char *is_simple;
  int (*callback)(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, void* callback_data);
  void* callback_data;
};
struct casadi_nlpsol_prob {
  casadi_int nx, ng, np;
  struct casadi_nlpsol_detect_bounds_prob detect_bounds;
};
struct casadi_nlpsol_detect_bounds_data {
  const casadi_real** arg;
  casadi_real** res;
  casadi_int* iw;
  casadi_real* w;
  casadi_real* a;
  casadi_real* b;
  casadi_int* target_l;
  casadi_int* target_u;
  casadi_real* lam_xl;
  casadi_real* lam_xu;
};
struct casadi_nlpsol_data {
  const struct casadi_nlpsol_prob* prob;
  struct casadi_oracle_data* oracle;
  casadi_real *lbz, *ubz;
  casadi_real *z;
  casadi_real *lam;
  casadi_real objective;
  const casadi_real *p, *lbx, *ubx, *lbg, *ubg, *x0, *lam_x0, *lam_g0;
  casadi_real *f, *x, *g, *lam_x, *lam_g, *lam_p;
  struct casadi_nlpsol_detect_bounds_data detect_bounds;
};
void casadi_nlpsol_work(const struct casadi_nlpsol_prob* p, casadi_int* sz_arg, casadi_int* sz_res,
    casadi_int* sz_iw, casadi_int* sz_w) {
  *sz_arg = *sz_res = 0;
  *sz_w = *sz_iw = 0;
  *sz_w += p->nx + p->ng;
  *sz_w += p->nx + p->ng;
  *sz_w += p->nx + p->ng;
  *sz_w += p->nx + p->ng;
  if (p->detect_bounds.ng) {
    *sz_arg += p->detect_bounds.sz_arg;
    *sz_res += p->detect_bounds.sz_res;
    *sz_iw += p->detect_bounds.sz_iw;
    *sz_w += p->detect_bounds.sz_w;
    *sz_w += p->detect_bounds.nb;
    *sz_w += p->detect_bounds.nb;
    *sz_iw += p->nx;
    *sz_iw += p->nx;
    *sz_w += p->nx;
    *sz_w += p->nx;
  }
}
void casadi_nlpsol_init(struct casadi_nlpsol_data* d, const casadi_real*** arg, casadi_real*** res,
    casadi_int** iw, casadi_real** w) {
  casadi_int nx, ng;
  const struct casadi_nlpsol_prob* p = d->prob;
  nx = p->nx;
  ng = p->ng;
  d->z = *w; *w += nx + ng;
  d->lbz = *w; *w += nx + ng;
  d->ubz = *w; *w += nx + ng;
  d->lam = *w; *w += nx + ng;
  if (p->detect_bounds.ng) {
    d->detect_bounds.arg = *arg; *arg += p->detect_bounds.sz_arg;
    d->detect_bounds.res = *res; *res += p->detect_bounds.sz_res;
    d->detect_bounds.iw = *iw; *iw += p->detect_bounds.sz_iw;
    d->detect_bounds.w = *w; *w += p->detect_bounds.sz_w;
    d->detect_bounds.a = *w; *w += p->detect_bounds.nb;
    d->detect_bounds.b = *w; *w += p->detect_bounds.nb;
    d->detect_bounds.target_l = *iw; *iw += p->nx;
    d->detect_bounds.target_u = *iw; *iw += p->nx;
    d->detect_bounds.lam_xl = *w; *w += nx;
    d->detect_bounds.lam_xu = *w; *w += nx;
  }
}
int casadi_detect_bounds_before(struct casadi_nlpsol_data* d_nlp) {
  const struct casadi_nlpsol_prob* p_nlp = d_nlp->prob;
  struct casadi_nlpsol_detect_bounds_data* d_bounds = &d_nlp->detect_bounds;
  const struct casadi_nlpsol_detect_bounds_prob* p_bounds = &p_nlp->detect_bounds;
  casadi_int nx = p_nlp->nx;
  d_bounds->arg[0] = d_nlp->p;
  d_bounds->res[0] = d_bounds->a;
  d_bounds->res[1] = d_bounds->b;
  p_bounds->callback(d_bounds->arg, d_bounds->res,
    d_bounds->iw, d_bounds->w, p_bounds->callback_data);
  for (casadi_int i=0;i<p_bounds->nb;++i) {
    if (d_bounds->a[i]==0) {
      casadi_int k = p_bounds->target_g[i];
      if (d_nlp->lbg[k]>d_bounds->b[i]) return 1;
      if (d_nlp->ubg[k]<d_bounds->b[i]) return 1;
    }
  }
  casadi_real* lbz = d_nlp->lbz+nx;
  casadi_real* ubz = d_nlp->ubz+nx;
  casadi_real* lam = d_nlp->lam+nx;
  for (casadi_int i=0;i<nx;++i) {
    d_bounds->lam_xl[i] = d_nlp->lam_x0 ? (d_nlp->lam_x0[i]<0)*d_nlp->lam_x0[i] : 0.;
    d_bounds->lam_xu[i] = d_nlp->lam_x0 ? (d_nlp->lam_x0[i]>0)*d_nlp->lam_x0[i] : 0.;
  }
  for (casadi_int i=0;i<nx;++i) {
    d_bounds->target_l[i] = i;
    d_bounds->target_u[i] = i;
  }
  casadi_int k=0;
  for (casadi_int i=0;i<p_bounds->ng;++i) {
    if (p_bounds->is_simple[i]) {
      casadi_real lb = (d_nlp->lbg[i]-d_bounds->b[k])/d_bounds->a[k];
      casadi_real ub = (d_nlp->ubg[i]-d_bounds->b[k])/d_bounds->a[k];
      if (d_bounds->a[k]<0) {
        casadi_real tmp = lb;
        lb = ub;
        ub = tmp;
      }
      casadi_int j = p_bounds->target_x[k];
      if (lb==d_nlp->lbz[j]) {
        if (d_nlp->lam_g0) d_bounds->lam_xl[j] += (d_nlp->lam_g0[i]<0)*d_nlp->lam_g0[i];
      } else if (lb>d_nlp->lbz[j]) {
        d_nlp->lbz[j] = lb;
        d_bounds->target_l[j] = nx+i;
        if (d_nlp->lam_g0) d_bounds->lam_xl[j] = (d_nlp->lam_g0[i]<0)*d_nlp->lam_g0[i];
      }
      if (ub==d_nlp->ubz[j]) {
        if (d_nlp->lam_g0) d_bounds->lam_xu[j] += (d_nlp->lam_g0[i]>0)*d_nlp->lam_g0[i];
      } else if (ub<d_nlp->ubz[j]) {
        d_nlp->ubz[j] = ub;
        d_bounds->target_u[j] = nx+i;
        if (d_nlp->lam_g0) d_bounds->lam_xu[j] = (d_nlp->lam_g0[i]>0)*d_nlp->lam_g0[i];
      }
      k++;
    } else {
      *lbz++ = d_nlp->lbg[i];
      *ubz++ = d_nlp->ubg[i];
      if (d_nlp->lam_g0) *lam++ = d_nlp->lam_g0[i];
    }
  }
  for (casadi_int i=0;i<nx;++i) {
    d_nlp->lam[i] = d_bounds->lam_xl[i]+d_bounds->lam_xu[i];
  }
  return 0;
}
int casadi_detect_bounds_after(struct casadi_nlpsol_data* d_nlp) {
  const struct casadi_nlpsol_prob* p_nlp = d_nlp->prob;
  struct casadi_nlpsol_detect_bounds_data* d_bounds = &d_nlp->detect_bounds;
  const struct casadi_nlpsol_detect_bounds_prob* p_bounds = &p_nlp->detect_bounds;
  casadi_int nx = p_nlp->nx;
  casadi_fill(d_nlp->lam_x, nx, 0.);
  casadi_fill(d_nlp->lam_g, p_bounds->ng, 0.);
  casadi_int k = 0;
  casadi_int k_normal = 0;
  for (casadi_int i=0;i<p_bounds->ng;++i) {
    if (p_bounds->is_simple[i]) {
      casadi_int j = p_bounds->target_x[k];
      if (d_nlp->g) d_nlp->g[i] = d_bounds->a[k]*d_nlp->z[j]+d_bounds->b[k];
      k++;
    } else {
      if (d_nlp->g) d_nlp->g[i] = d_nlp->z[nx+k_normal];
      if (d_nlp->lam_g) d_nlp->lam_g[i] = d_nlp->lam[nx+k_normal];
      k_normal++;
    }
  }
  for (casadi_int i=0;i<nx;++i) {
    if (d_bounds->target_l[i]<nx) {
      if (d_nlp->lam_x) d_nlp->lam_x[i] += (d_nlp->lam[i]<0)*d_nlp->lam[i];
    } else {
      if (d_nlp->lam_g)
        d_nlp->lam_g[d_bounds->target_l[i]-nx] += (d_nlp->lam[i]<0)*d_nlp->lam[i];
    }
    if (d_bounds->target_u[i]<nx) {
      if (d_nlp->lam_x) d_nlp->lam_x[i] += (d_nlp->lam[i]>0)*d_nlp->lam[i];
    } else {
      if (d_nlp->lam_g)
        d_nlp->lam_g[d_bounds->target_u[i]-nx] += (d_nlp->lam[i]>0)*d_nlp->lam[i];
    }
  }
  k = 0;
  for (casadi_int i=0;i<p_bounds->ng;++i) {
    if (p_bounds->is_simple[i]) {
      if (d_nlp->lam_g) d_nlp->lam_g[i] /= d_bounds->a[k];
      k++;
    }
  }
  return 0;
}

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

casadi_real casadi_fmax(casadi_real x, casadi_real y) {
/* Pre-c99 compatibility */
#if __STDC_VERSION__ < 199901L
  return x>y ? x : y;
#else
  return fmax(x, y);
#endif
}

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = 0;
  }
}

struct casadi_ipopt_prob {
  const struct casadi_nlpsol_prob* nlp;
  const casadi_int *sp_h, *sp_a;
  casadi_int nnz_h, nnz_a;
  Eval_F_CB eval_f;
  Eval_G_CB eval_g;
  Eval_Grad_F_CB eval_grad_f;
  Eval_Jac_G_CB eval_jac_g;
  Eval_H_CB eval_h;
};
void casadi_ipopt_setup(struct casadi_ipopt_prob* p) {
  if (p->sp_h) {
    p->nnz_h = p->sp_h[2+p->sp_h[1]];
  } else {
    p->nnz_h = 0;
  }
  p->nnz_a = p->sp_a[2+p->sp_a[1]];
}
struct casadi_ipopt_data {
  const struct casadi_ipopt_prob* prob;
  struct casadi_nlpsol_data* nlp;
  IpoptProblem ipopt;
  const casadi_real** arg;
  casadi_real** res;
  casadi_int* iw;
  casadi_real* w;
  casadi_real *z_L, *z_U;
  enum ApplicationReturnStatus status;
  int unified_return_status;
  int success;
};
int ipopt_init_mem(struct casadi_ipopt_data* d) {
  return 0;
}
void ipopt_free_mem(struct casadi_ipopt_data* d) {
}
void casadi_ipopt_work(const struct casadi_ipopt_prob* p, casadi_int* sz_arg, casadi_int* sz_res, casadi_int* sz_iw, casadi_int* sz_w) {
  casadi_nlpsol_work(p->nlp, sz_arg, sz_res, sz_iw, sz_w);
  *sz_w += p->nlp->nx;
  *sz_w += p->nlp->nx;
}
void casadi_ipopt_init(struct casadi_ipopt_data* d, const casadi_real*** arg, casadi_real*** res, casadi_int** iw, casadi_real** w) {
  const struct casadi_ipopt_prob* p = d->prob;
  const struct casadi_nlpsol_prob* p_nlp = p->nlp;
  d->z_L = *w; *w += p_nlp->nx;
  d->z_U = *w; *w += p_nlp->nx;
  d->arg = *arg;
  d->res = *res;
  d->iw = *iw;
  d->w = *w;
}
void casadi_ipopt_presolve(struct casadi_ipopt_data* d) {
  const struct casadi_ipopt_prob* p = d->prob;
  const struct casadi_nlpsol_prob* p_nlp = p->nlp;
  const struct casadi_nlpsol_data* d_nlp = d->nlp;
  d->ipopt = CreateIpoptProblem(
                p_nlp->nx, (double *) d_nlp->lbz, (double *) d_nlp->ubz,
                p_nlp->ng, (double *) d_nlp->lbz+p_nlp->nx,
                           (double *) d_nlp->ubz+p_nlp->nx,
                p->nnz_a, p->nnz_h, 0,
                p->eval_f, p->eval_g, p->eval_grad_f,
                p->eval_jac_g, p->eval_h);
}
void casadi_ipopt_solve(struct casadi_ipopt_data* d) {
  const struct casadi_ipopt_prob* p = d->prob;
  const struct casadi_nlpsol_prob* p_nlp = p->nlp;
  struct casadi_nlpsol_data* d_nlp = d->nlp;
  d->unified_return_status = 1;
  for (casadi_int i=0; i<p_nlp->nx; ++i) {
    d->z_L[i] = casadi_fmax(0., -d_nlp->lam[i]);
    d->z_U[i] = casadi_fmax(0., d_nlp->lam[i]);
  }
  d->status = IpoptSolve(d->ipopt, d_nlp->z, d_nlp->z + p_nlp->nx, &d_nlp->objective, d_nlp->lam+p_nlp->nx, d->z_L, d->z_U, d);
  for (casadi_int i=0; i<p_nlp->nx; ++i) {
    d_nlp->lam[i] = d->z_U[i]-d->z_L[i];
  }
  FreeIpoptProblem(d->ipopt);
  if (d->status==Solve_Succeeded ||
      d->status==Solved_To_Acceptable_Level ||
      d->status==Feasible_Point_Found) {
        d->unified_return_status = 0;
  } else if (d->status==Maximum_Iterations_Exceeded) {
      d->unified_return_status = 2;
  }
  #if (IPOPT_VERSION_MAJOR > 3) || (IPOPT_VERSION_MAJOR == 3 && IPOPT_VERSION_MINOR >= 14)
    if (d->status==Maximum_WallTime_Exceeded) d->unified_return_status = 2;
  #endif
  d->success = (d->unified_return_status == 0);
}
void casadi_ipopt_sparsity(const casadi_int* sp, ipindex *iRow, ipindex *jCol) {
    casadi_int ncol = sp[1];
    const casadi_int* colind = sp+2;
    const casadi_int* row = colind+ncol+1;
    for (casadi_int cc=0; cc<ncol; ++cc) {
        for (casadi_int el=colind[cc]; el<colind[cc+1]; ++el) {
            *iRow++ = row[el];
            *jCol++ = cc;
        }
    }
}
bool casadi_ipopt_hess_l_empty(ipindex n, ipnumber *x, bool new_x, ipnumber obj_factor, ipindex m, ipnumber *lambda, bool new_lambda, ipindex nele_hess, ipindex *iRow, ipindex *jCol, ipnumber *values, UserDataPtr user_data) {
  return false;
}

void casadi_scal(casadi_int n, casadi_real alpha, casadi_real* x) {
  casadi_int i;
  if (!x) return;
  for (i=0; i<n; ++i) *x++ *= alpha;
}

static int casadi_f0_mem_counter = 0;
static int casadi_f0_unused_stack_counter = -1;
static int casadi_f0_unused_stack[CASADI_MAX_NUM_THREADS];
static struct casadi_ipopt_data casadi_f0_mem[CASADI_MAX_NUM_THREADS];

#ifndef casadi_inf
  #define casadi_inf INFINITY
#endif

static const casadi_int casadi_s0[23] = {8, 4, 0, 4, 8, 12, 16, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7};
static const casadi_int casadi_s1[17] = {4, 4, 0, 1, 3, 6, 10, 0, 0, 1, 0, 1, 2, 0, 1, 2, 3};
static const casadi_int casadi_s2[8] = {4, 1, 0, 4, 0, 1, 2, 3};
static const casadi_int casadi_s3[28] = {24, 1, 0, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};
static const casadi_int casadi_s4[12] = {8, 1, 0, 8, 0, 1, 2, 3, 4, 5, 6, 7};
static const casadi_int casadi_s5[5] = {1, 1, 0, 1, 0};

/* nlp_grad:(x[4],p[24],lam_f,lam_g[8])->(f,g[8],grad_gamma_x[4],grad_gamma_p[24]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a3, a4, a5, a6, a7, a8, a9;
  a0=arg[0]? arg[0][0] : 0;
  a1=arg[0]? arg[0][2] : 0;
  a2=(a0-a1);
  a3=casadi_sq(a2);
  a4=arg[0]? arg[0][1] : 0;
  a5=arg[0]? arg[0][3] : 0;
  a6=(a4-a5);
  a7=casadi_sq(a6);
  a3=(a3+a7);
  a3=sqrt(a3);
  if (res[0]!=0) res[0][0]=a3;
  a7=arg[1]? arg[1][0] : 0;
  a8=(a7*a0);
  a9=arg[1]? arg[1][4] : 0;
  a10=(a9*a4);
  a8=(a8+a10);
  a10=arg[1]? arg[1][8] : 0;
  a8=(a8-a10);
  if (res[1]!=0) res[1][0]=a8;
  a8=arg[1]? arg[1][1] : 0;
  a10=(a8*a0);
  a11=arg[1]? arg[1][5] : 0;
  a12=(a11*a4);
  a10=(a10+a12);
  a12=arg[1]? arg[1][9] : 0;
  a10=(a10-a12);
  if (res[1]!=0) res[1][1]=a10;
  a10=arg[1]? arg[1][2] : 0;
  a12=(a10*a0);
  a13=arg[1]? arg[1][6] : 0;
  a14=(a13*a4);
  a12=(a12+a14);
  a14=arg[1]? arg[1][10] : 0;
  a12=(a12-a14);
  if (res[1]!=0) res[1][2]=a12;
  a12=arg[1]? arg[1][3] : 0;
  a14=(a12*a0);
  a15=arg[1]? arg[1][7] : 0;
  a16=(a15*a4);
  a14=(a14+a16);
  a16=arg[1]? arg[1][11] : 0;
  a14=(a14-a16);
  if (res[1]!=0) res[1][3]=a14;
  a14=arg[1]? arg[1][12] : 0;
  a16=(a14*a1);
  a17=arg[1]? arg[1][16] : 0;
  a18=(a17*a5);
  a16=(a16+a18);
  a18=arg[1]? arg[1][20] : 0;
  a16=(a16-a18);
  if (res[1]!=0) res[1][4]=a16;
  a16=arg[1]? arg[1][13] : 0;
  a18=(a16*a1);
  a19=arg[1]? arg[1][17] : 0;
  a20=(a19*a5);
  a18=(a18+a20);
  a20=arg[1]? arg[1][21] : 0;
  a18=(a18-a20);
  if (res[1]!=0) res[1][5]=a18;
  a18=arg[1]? arg[1][14] : 0;
  a20=(a18*a1);
  a21=arg[1]? arg[1][18] : 0;
  a22=(a21*a5);
  a20=(a20+a22);
  a22=arg[1]? arg[1][22] : 0;
  a20=(a20-a22);
  if (res[1]!=0) res[1][6]=a20;
  a20=arg[1]? arg[1][15] : 0;
  a22=(a20*a1);
  a23=arg[1]? arg[1][19] : 0;
  a24=(a23*a5);
  a22=(a22+a24);
  a24=arg[1]? arg[1][23] : 0;
  a22=(a22-a24);
  if (res[1]!=0) res[1][7]=a22;
  a22=arg[3]? arg[3][3] : 0;
  a12=(a12*a22);
  a24=arg[3]? arg[3][2] : 0;
  a10=(a10*a24);
  a12=(a12+a10);
  a10=arg[3]? arg[3][1] : 0;
  a8=(a8*a10);
  a12=(a12+a8);
  a8=arg[3]? arg[3][0] : 0;
  a7=(a7*a8);
  a12=(a12+a7);
  a2=(a2+a2);
  a7=arg[2]? arg[2][0] : 0;
  a3=(a3+a3);
  a7=(a7/a3);
  a2=(a2*a7);
  a12=(a12+a2);
  if (res[2]!=0) res[2][0]=a12;
  a15=(a15*a22);
  a13=(a13*a24);
  a15=(a15+a13);
  a11=(a11*a10);
  a15=(a15+a11);
  a9=(a9*a8);
  a15=(a15+a9);
  a6=(a6+a6);
  a6=(a6*a7);
  a15=(a15+a6);
  if (res[2]!=0) res[2][1]=a15;
  a15=arg[3]? arg[3][7] : 0;
  a20=(a20*a15);
  a7=arg[3]? arg[3][6] : 0;
  a18=(a18*a7);
  a20=(a20+a18);
  a18=arg[3]? arg[3][5] : 0;
  a16=(a16*a18);
  a20=(a20+a16);
  a16=arg[3]? arg[3][4] : 0;
  a14=(a14*a16);
  a20=(a20+a14);
  a20=(a20-a2);
  if (res[2]!=0) res[2][2]=a20;
  a23=(a23*a15);
  a21=(a21*a7);
  a23=(a23+a21);
  a19=(a19*a18);
  a23=(a23+a19);
  a17=(a17*a16);
  a23=(a23+a17);
  a23=(a23-a6);
  if (res[2]!=0) res[2][3]=a23;
  a23=(a0*a8);
  if (res[3]!=0) res[3][0]=a23;
  a23=(a0*a10);
  if (res[3]!=0) res[3][1]=a23;
  a23=(a0*a24);
  if (res[3]!=0) res[3][2]=a23;
  a0=(a0*a22);
  if (res[3]!=0) res[3][3]=a0;
  a0=(a4*a8);
  if (res[3]!=0) res[3][4]=a0;
  a0=(a4*a10);
  if (res[3]!=0) res[3][5]=a0;
  a0=(a4*a24);
  if (res[3]!=0) res[3][6]=a0;
  a4=(a4*a22);
  if (res[3]!=0) res[3][7]=a4;
  a8=(-a8);
  if (res[3]!=0) res[3][8]=a8;
  a10=(-a10);
  if (res[3]!=0) res[3][9]=a10;
  a24=(-a24);
  if (res[3]!=0) res[3][10]=a24;
  a22=(-a22);
  if (res[3]!=0) res[3][11]=a22;
  a22=(a1*a16);
  if (res[3]!=0) res[3][12]=a22;
  a22=(a1*a18);
  if (res[3]!=0) res[3][13]=a22;
  a22=(a1*a7);
  if (res[3]!=0) res[3][14]=a22;
  a1=(a1*a15);
  if (res[3]!=0) res[3][15]=a1;
  a1=(a5*a16);
  if (res[3]!=0) res[3][16]=a1;
  a1=(a5*a18);
  if (res[3]!=0) res[3][17]=a1;
  a1=(a5*a7);
  if (res[3]!=0) res[3][18]=a1;
  a5=(a5*a15);
  if (res[3]!=0) res[3][19]=a5;
  a16=(-a16);
  if (res[3]!=0) res[3][20]=a16;
  a18=(-a18);
  if (res[3]!=0) res[3][21]=a18;
  a7=(-a7);
  if (res[3]!=0) res[3][22]=a7;
  a15=(-a15);
  if (res[3]!=0) res[3][23]=a15;
  return 0;
}

/* nlp_f:(x[4],p[24])->(f) */
static int casadi_f2(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2;
  a0=arg[0]? arg[0][0] : 0;
  a1=arg[0]? arg[0][2] : 0;
  a0=(a0-a1);
  a0=casadi_sq(a0);
  a1=arg[0]? arg[0][1] : 0;
  a2=arg[0]? arg[0][3] : 0;
  a1=(a1-a2);
  a1=casadi_sq(a1);
  a0=(a0+a1);
  a0=sqrt(a0);
  if (res[0]!=0) res[0][0]=a0;
  return 0;
}

/* nlp_grad_f:(x[4],p[24])->(f,grad_f_x[4]) */
static int casadi_f3(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3;
  a0=arg[0]? arg[0][0] : 0;
  a1=arg[0]? arg[0][2] : 0;
  a0=(a0-a1);
  a1=casadi_sq(a0);
  a2=arg[0]? arg[0][1] : 0;
  a3=arg[0]? arg[0][3] : 0;
  a2=(a2-a3);
  a3=casadi_sq(a2);
  a1=(a1+a3);
  a1=sqrt(a1);
  if (res[0]!=0) res[0][0]=a1;
  a0=(a0/a1);
  if (res[1]!=0) res[1][0]=a0;
  a2=(a2/a1);
  if (res[1]!=0) res[1][1]=a2;
  a0=(-a0);
  if (res[1]!=0) res[1][2]=a0;
  a2=(-a2);
  if (res[1]!=0) res[1][3]=a2;
  return 0;
}

/* nlp_g:(x[4],p[24])->(g[8]) */
static int casadi_f4(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3;
  a0=arg[1]? arg[1][0] : 0;
  a1=arg[0]? arg[0][0] : 0;
  a0=(a0*a1);
  a2=arg[1]? arg[1][4] : 0;
  a3=arg[0]? arg[0][1] : 0;
  a2=(a2*a3);
  a0=(a0+a2);
  a2=arg[1]? arg[1][8] : 0;
  a0=(a0-a2);
  if (res[0]!=0) res[0][0]=a0;
  a0=arg[1]? arg[1][1] : 0;
  a0=(a0*a1);
  a2=arg[1]? arg[1][5] : 0;
  a2=(a2*a3);
  a0=(a0+a2);
  a2=arg[1]? arg[1][9] : 0;
  a0=(a0-a2);
  if (res[0]!=0) res[0][1]=a0;
  a0=arg[1]? arg[1][2] : 0;
  a0=(a0*a1);
  a2=arg[1]? arg[1][6] : 0;
  a2=(a2*a3);
  a0=(a0+a2);
  a2=arg[1]? arg[1][10] : 0;
  a0=(a0-a2);
  if (res[0]!=0) res[0][2]=a0;
  a0=arg[1]? arg[1][3] : 0;
  a0=(a0*a1);
  a1=arg[1]? arg[1][7] : 0;
  a1=(a1*a3);
  a0=(a0+a1);
  a1=arg[1]? arg[1][11] : 0;
  a0=(a0-a1);
  if (res[0]!=0) res[0][3]=a0;
  a0=arg[1]? arg[1][12] : 0;
  a1=arg[0]? arg[0][2] : 0;
  a0=(a0*a1);
  a3=arg[1]? arg[1][16] : 0;
  a2=arg[0]? arg[0][3] : 0;
  a3=(a3*a2);
  a0=(a0+a3);
  a3=arg[1]? arg[1][20] : 0;
  a0=(a0-a3);
  if (res[0]!=0) res[0][4]=a0;
  a0=arg[1]? arg[1][13] : 0;
  a0=(a0*a1);
  a3=arg[1]? arg[1][17] : 0;
  a3=(a3*a2);
  a0=(a0+a3);
  a3=arg[1]? arg[1][21] : 0;
  a0=(a0-a3);
  if (res[0]!=0) res[0][5]=a0;
  a0=arg[1]? arg[1][14] : 0;
  a0=(a0*a1);
  a3=arg[1]? arg[1][18] : 0;
  a3=(a3*a2);
  a0=(a0+a3);
  a3=arg[1]? arg[1][22] : 0;
  a0=(a0-a3);
  if (res[0]!=0) res[0][6]=a0;
  a0=arg[1]? arg[1][15] : 0;
  a0=(a0*a1);
  a1=arg[1]? arg[1][19] : 0;
  a1=(a1*a2);
  a0=(a0+a1);
  a1=arg[1]? arg[1][23] : 0;
  a0=(a0-a1);
  if (res[0]!=0) res[0][7]=a0;
  return 0;
}

/* nlp_jac_g:(x[4],p[24])->(g[8],jac_g_x[8x4,16nz]) */
static int casadi_f5(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a2, a3, a4, a5, a6, a7, a8, a9;
  a0=arg[1]? arg[1][0] : 0;
  a1=arg[0]? arg[0][0] : 0;
  a2=(a0*a1);
  a3=arg[1]? arg[1][4] : 0;
  a4=arg[0]? arg[0][1] : 0;
  a5=(a3*a4);
  a2=(a2+a5);
  a5=arg[1]? arg[1][8] : 0;
  a2=(a2-a5);
  if (res[0]!=0) res[0][0]=a2;
  a2=arg[1]? arg[1][1] : 0;
  a5=(a2*a1);
  a6=arg[1]? arg[1][5] : 0;
  a7=(a6*a4);
  a5=(a5+a7);
  a7=arg[1]? arg[1][9] : 0;
  a5=(a5-a7);
  if (res[0]!=0) res[0][1]=a5;
  a5=arg[1]? arg[1][2] : 0;
  a7=(a5*a1);
  a8=arg[1]? arg[1][6] : 0;
  a9=(a8*a4);
  a7=(a7+a9);
  a9=arg[1]? arg[1][10] : 0;
  a7=(a7-a9);
  if (res[0]!=0) res[0][2]=a7;
  a7=arg[1]? arg[1][3] : 0;
  a1=(a7*a1);
  a9=arg[1]? arg[1][7] : 0;
  a4=(a9*a4);
  a1=(a1+a4);
  a4=arg[1]? arg[1][11] : 0;
  a1=(a1-a4);
  if (res[0]!=0) res[0][3]=a1;
  a1=arg[1]? arg[1][12] : 0;
  a4=arg[0]? arg[0][2] : 0;
  a10=(a1*a4);
  a11=arg[1]? arg[1][16] : 0;
  a12=arg[0]? arg[0][3] : 0;
  a13=(a11*a12);
  a10=(a10+a13);
  a13=arg[1]? arg[1][20] : 0;
  a10=(a10-a13);
  if (res[0]!=0) res[0][4]=a10;
  a10=arg[1]? arg[1][13] : 0;
  a13=(a10*a4);
  a14=arg[1]? arg[1][17] : 0;
  a15=(a14*a12);
  a13=(a13+a15);
  a15=arg[1]? arg[1][21] : 0;
  a13=(a13-a15);
  if (res[0]!=0) res[0][5]=a13;
  a13=arg[1]? arg[1][14] : 0;
  a15=(a13*a4);
  a16=arg[1]? arg[1][18] : 0;
  a17=(a16*a12);
  a15=(a15+a17);
  a17=arg[1]? arg[1][22] : 0;
  a15=(a15-a17);
  if (res[0]!=0) res[0][6]=a15;
  a15=arg[1]? arg[1][15] : 0;
  a4=(a15*a4);
  a17=arg[1]? arg[1][19] : 0;
  a12=(a17*a12);
  a4=(a4+a12);
  a12=arg[1]? arg[1][23] : 0;
  a4=(a4-a12);
  if (res[0]!=0) res[0][7]=a4;
  if (res[1]!=0) res[1][0]=a0;
  if (res[1]!=0) res[1][1]=a2;
  if (res[1]!=0) res[1][2]=a5;
  if (res[1]!=0) res[1][3]=a7;
  if (res[1]!=0) res[1][4]=a3;
  if (res[1]!=0) res[1][5]=a6;
  if (res[1]!=0) res[1][6]=a8;
  if (res[1]!=0) res[1][7]=a9;
  if (res[1]!=0) res[1][8]=a1;
  if (res[1]!=0) res[1][9]=a10;
  if (res[1]!=0) res[1][10]=a13;
  if (res[1]!=0) res[1][11]=a15;
  if (res[1]!=0) res[1][12]=a11;
  if (res[1]!=0) res[1][13]=a14;
  if (res[1]!=0) res[1][14]=a16;
  if (res[1]!=0) res[1][15]=a17;
  return 0;
}

/* nlp_hess_l:(x[4],p[24],lam_f,lam_g[8])->(triu_hess_gamma_x_x[4x4,10nz]) */
static int casadi_f6(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3, a4, a5, a6, a7, a8, a9;
  a0=2.;
  a1=arg[2]? arg[2][0] : 0;
  a2=arg[0]? arg[0][0] : 0;
  a3=arg[0]? arg[0][2] : 0;
  a2=(a2-a3);
  a3=casadi_sq(a2);
  a4=arg[0]? arg[0][1] : 0;
  a5=arg[0]? arg[0][3] : 0;
  a4=(a4-a5);
  a5=casadi_sq(a4);
  a3=(a3+a5);
  a3=sqrt(a3);
  a5=(a3+a3);
  a1=(a1/a5);
  a6=(a0*a1);
  a7=(a2+a2);
  a5=(a1/a5);
  a8=(a2/a3);
  a8=(a8+a8);
  a8=(a5*a8);
  a8=(a7*a8);
  a6=(a6-a8);
  if (res[0]!=0) res[0][0]=a6;
  a6=(a4/a3);
  a6=(a6+a6);
  a6=(a5*a6);
  a8=(a7*a6);
  a8=(-a8);
  if (res[0]!=0) res[0][1]=a8;
  a0=(a0*a1);
  a8=(a4+a4);
  a6=(a8*a6);
  a0=(a0-a6);
  if (res[0]!=0) res[0][2]=a0;
  a0=-2.;
  a6=(a0*a1);
  a2=(a2/a3);
  a2=(a2+a2);
  a2=(a5*a2);
  a9=(a7*a2);
  a6=(a6+a9);
  if (res[0]!=0) res[0][3]=a6;
  a2=(a8*a2);
  if (res[0]!=0) res[0][4]=a2;
  a6=(-a6);
  if (res[0]!=0) res[0][5]=a6;
  a4=(a4/a3);
  a4=(a4+a4);
  a5=(a5*a4);
  a7=(a7*a5);
  if (res[0]!=0) res[0][6]=a7;
  a0=(a0*a1);
  a8=(a8*a5);
  a0=(a0+a8);
  if (res[0]!=0) res[0][7]=a0;
  a7=(-a7);
  if (res[0]!=0) res[0][8]=a7;
  a0=(-a0);
  if (res[0]!=0) res[0][9]=a0;
  return 0;
}

bool casadi_nlp_f0(ipindex n, ipnumber *x, bool new_x, ipnumber *obj_value, UserDataPtr user_data) {
  struct casadi_ipopt_data* d = (struct casadi_ipopt_data*) user_data;
  d->arg[0] = x;
  d->arg[1] = d->nlp->p;
  d->res[0] = obj_value;
  if (casadi_f2(d->arg, d->res, d->iw, d->w, 0)) return false;
  return true;
}
bool casadi_nlp_g0(ipindex n, ipnumber *x, bool new_x, ipindex m, ipnumber *g, UserDataPtr user_data) {
  struct casadi_ipopt_data* d = (struct casadi_ipopt_data*) user_data;
  d->arg[0] = x;
  d->arg[1] = d->nlp->p;
  d->res[0] = g;
  if (casadi_f4(d->arg, d->res, d->iw, d->w, 0)) return false;
  return true;
}
bool casadi_nlp_grad_f0(ipindex n, ipnumber *x, bool new_x, ipnumber *grad_f, UserDataPtr user_data) {
  struct casadi_ipopt_data* d = (struct casadi_ipopt_data*) user_data;
  d->arg[0] = x;
  d->arg[1] = d->nlp->p;
  d->res[0] = 0;
  d->res[1] = grad_f;
  if (casadi_f3(d->arg, d->res, d->iw, d->w, 0)) return false;
  return true;
}
bool casadi_nlp_jac_g0(ipindex n, ipnumber *x, bool new_x, ipindex m, ipindex nele_jac, ipindex *iRow, ipindex *jCol, ipnumber *values, UserDataPtr user_data) {
  struct casadi_ipopt_data* d = (struct casadi_ipopt_data*) user_data;
  if (values) {
    d->arg[0] = x;
    d->arg[1] = d->nlp->p;
    d->res[0] = 0;
    d->res[1] = values;
    if (casadi_f5(d->arg, d->res, d->iw, d->w, 0)) return false;
  } else {
    casadi_ipopt_sparsity(d->prob->sp_a, iRow, jCol);
  }
  return true;
}
bool casadi_nlp_hess_l0(ipindex n, ipnumber *x, bool new_x, ipnumber obj_factor,ipindex m, ipnumber *lambda, bool new_lambda, ipindex nele_hess, ipindex *iRow, ipindex *jCol, ipnumber *values, UserDataPtr user_data) {
  struct casadi_ipopt_data* d = (struct casadi_ipopt_data*) user_data;
  if (values) {
    d->arg[0] = x;
    d->arg[1] = d->nlp->p;
    d->arg[2] = &obj_factor;
    d->arg[3] = lambda;
    d->res[0] = values;
    if (casadi_f6(d->arg, d->res, d->iw, d->w, 0)) return false;
    return true;
  } else {
    casadi_ipopt_sparsity(d->prob->sp_h, iRow, jCol);
  }
  return true;
}
/* cbf_solver:(x0[4],p[24],lbx[4],ubx[4],lbg[8],ubg[8],lam_x0[4],lam_g0[8])->(x[4],f,g[8],lam_x[4],lam_g[8],lam_p[24]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  const casadi_real one=1;
  struct casadi_ipopt_data* d=&casadi_f0_mem[mem];
  struct casadi_ipopt_prob p;
  struct casadi_nlpsol_data d_nlp;
  struct casadi_nlpsol_prob p_nlp;
  struct casadi_oracle_data d_oracle;
  d_nlp.oracle = &d_oracle;
  d_nlp.p = arg[1];
  d_nlp.lbx = arg[2];
  d_nlp.ubx = arg[3];
  d_nlp.lbg = arg[4];
  d_nlp.ubg = arg[5];
  d_nlp.x0 = arg[0];
  d_nlp.lam_x0 = arg[6];
  d_nlp.lam_g0 = arg[7];
  d_nlp.x = res[0];
  d_nlp.f = res[1];
  d_nlp.g = res[2];
  d_nlp.lam_x = res[3];
  d_nlp.lam_g = res[4];
  d_nlp.lam_p = res[5];
  d_nlp.prob = &p_nlp;
  p_nlp.nx = 4;
  p_nlp.ng = 8;
  p_nlp.np = 24;
  p_nlp.detect_bounds.ng = 0;
  casadi_nlpsol_init(&d_nlp, &arg, &res, &iw, &w);
  if (d_nlp.x0) {
    casadi_copy(d_nlp.x0, 4, d_nlp.z);
  } else {
    casadi_clear(d_nlp.z, 4);
  }
  if (d_nlp.lbx) {
    casadi_copy(d_nlp.lbx, 4, d_nlp.lbz);
  } else {
    casadi_fill(d_nlp.lbz, 4, -casadi_inf);
  }
  if (d_nlp.ubx) {
    casadi_copy(d_nlp.ubx, 4, d_nlp.ubz);
  } else {
    casadi_fill(d_nlp.ubz, 4, casadi_inf);
  }
  if (d_nlp.lam_x0) {
    casadi_copy(d_nlp.lam_x0, 4, d_nlp.lam);
  } else {
    casadi_clear(d_nlp.lam, 4);
  }
  if (d_nlp.lbg) {
    casadi_copy(d_nlp.lbg, 8, d_nlp.lbz+4);
  } else {
    casadi_fill(d_nlp.lbz+4, 8, -casadi_inf);
  }
  if (d_nlp.ubg) {
    casadi_copy(d_nlp.ubg, 8, d_nlp.ubz+4);
  } else {
    casadi_fill(d_nlp.ubz+4, 8, casadi_inf);
  }
  if (d_nlp.lam_g0) {
    casadi_copy(d_nlp.lam_g0, 8, d_nlp.lam+4);
  } else {
    casadi_clear(d_nlp.lam+4, 8);
  }
  d->nlp = &d_nlp;
  d->prob = &p;
  p.nlp = &p_nlp;
  p.sp_a = casadi_s0;
  p.sp_h = casadi_s1;
  casadi_ipopt_setup(&p);
  p.eval_f = casadi_nlp_f0;
  p.eval_g = casadi_nlp_g0;
  p.eval_grad_f = casadi_nlp_grad_f0;
  p.eval_jac_g = casadi_nlp_jac_g0;
  p.eval_h = casadi_nlp_hess_l0;
  casadi_ipopt_init(d, &arg, &res, &iw, &w);
  casadi_ipopt_presolve(d);
  AddIpoptStrOption(d->ipopt, "linear_solver","mumps");
  casadi_ipopt_solve(d);
  d->arg[0] = d_nlp.z;
  d->arg[1] = d_nlp.p;
  d->arg[2] = &one;
  d->arg[3] = d_nlp.lam+4;
  d->res[0] = 0;
  d->res[1] = 0;
  d->res[2] = 0;
  d->res[3] = d_nlp.lam_p;
  if (casadi_f1(d->arg, d->res, d->iw, d->w, 0)) return 1;
  casadi_scal(24, -1.0, d_nlp.lam_p);
  casadi_copy(d_nlp.z, 4, d_nlp.x);
  casadi_copy(d_nlp.z + 4, 8, d_nlp.g);
  casadi_copy(d_nlp.lam, 4, d_nlp.lam_x);
  casadi_copy(d_nlp.lam + 4, 8, d_nlp.lam_g);
  if (d_nlp.f) casadi_copy(&d_nlp.objective, 1, d_nlp.f);
  if (d_nlp.lam_p) casadi_copy(d_nlp.lam_p, 24, d_nlp.lam_p);
  return 0;
  return 0;
}

int casadi_f0_alloc_mem(void) {
  return casadi_f0_mem_counter++;
}

int casadi_f0_init_mem(int mem) {
  ipopt_init_mem(&casadi_f0_mem[mem]);
  return 0;
}

void casadi_f0_free_mem(int mem) {
  ipopt_free_mem(&casadi_f0_mem[mem]);
}

int casadi_f0_checkout(void) {
  int mid;
  if (casadi_f0_unused_stack_counter>=0) {
    return casadi_f0_unused_stack[casadi_f0_unused_stack_counter--];
  } else {
    if (casadi_f0_mem_counter==CASADI_MAX_NUM_THREADS) return -1;
    mid = casadi_f0_alloc_mem();
    if (mid<0) return -1;
    if(casadi_f0_init_mem(mid)) return -1;
    return mid;
  }
}

void casadi_f0_release(int mem) {
  casadi_f0_unused_stack[++casadi_f0_unused_stack_counter] = mem;
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver_alloc_mem(void) {
  return casadi_f0_alloc_mem();
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver_init_mem(int mem) {
  return casadi_f0_init_mem(mem);
}

extern "C" CASADI_SYMBOL_EXPORT void cbf_solver_free_mem(int mem) {
  casadi_f0_free_mem(mem);
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver_checkout(void) {
  return casadi_f0_checkout();
}

extern "C" CASADI_SYMBOL_EXPORT void cbf_solver_release(int mem) {
  casadi_f0_release(mem);
}

extern "C" CASADI_SYMBOL_EXPORT void cbf_solver_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void cbf_solver_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int cbf_solver_n_in(void) { return 8;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int cbf_solver_n_out(void) { return 6;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real cbf_solver_default_in(casadi_int i) {
  switch (i) {
    case 2: return -casadi_inf;
    case 3: return casadi_inf;
    case 4: return -casadi_inf;
    case 5: return casadi_inf;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* cbf_solver_name_in(casadi_int i) {
  switch (i) {
    case 0: return "x0";
    case 1: return "p";
    case 2: return "lbx";
    case 3: return "ubx";
    case 4: return "lbg";
    case 5: return "ubg";
    case 6: return "lam_x0";
    case 7: return "lam_g0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* cbf_solver_name_out(casadi_int i) {
  switch (i) {
    case 0: return "x";
    case 1: return "f";
    case 2: return "g";
    case 3: return "lam_x";
    case 4: return "lam_g";
    case 5: return "lam_p";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* cbf_solver_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    case 1: return casadi_s3;
    case 2: return casadi_s2;
    case 3: return casadi_s2;
    case 4: return casadi_s4;
    case 5: return casadi_s4;
    case 6: return casadi_s2;
    case 7: return casadi_s4;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* cbf_solver_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    case 1: return casadi_s5;
    case 2: return casadi_s4;
    case 3: return casadi_s2;
    case 4: return casadi_s4;
    case 5: return casadi_s3;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 12;
  if (sz_res) *sz_res = 10;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 111;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int cbf_solver_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 12*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 10*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 111*sizeof(casadi_real);
  return 0;
}


